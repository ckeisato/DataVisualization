




///have some way to indicate that it is collapse/expanded
class MyController {
  MyNode hover;
  MyNode selectedNode;

  boolean buttons;
  boolean showingBox; //state of showing the control box

  float boxX;
  float boxY;
  float boxWidth;
  float boxHeight;

  float buttonx;
  float collapseY;
  float expandY;
  float centerY;

  float buttonHeight;
  float buttonWidth;

  public MyController() {
    this.buttons = false;
    this.showingBox = false;

    this.boxX = 20;
    this.boxY = 20;
    this.boxWidth = 200;
    this.boxHeight = 200;

    this.buttonHeight = 30;
    this.buttonWidth = this.boxWidth - 20;

    this.buttonx = this.boxX + 10;
    this.collapseY = this.boxY + 10;
    this.expandY = this.boxY + 20 + this.buttonHeight;
    this.centerY = this.boxY + 30 + 2*this.buttonHeight;
  }


  void run(MyNode start) {

    this.hover = highlight(start);
    if (this.hover != null) {
      this.selectedNode = this.hover;
    }
    //open box
    if (this.hover != null && this.showingBox == false) {
      this.showingBox = true;
    }

    //close box
    else if (this.hover == null && this.showingBox == true && this.boxIsect() == false) {
      this.showingBox = false;
    }
  }
  

  boolean boxIsect() {
    float xDist = mouseX - this.boxX; 
    float yDist = mouseY - this.boxY;
    if ((xDist < this.boxWidth) && (yDist < this.boxHeight) && (xDist > 0) && (yDist > 0)) {
      return true;
    }
    return false;
  }

  MyNode highlight(MyNode start) {
    if (start.circle.isBounded()) {
      return start;
    }
    if (!start.leaf) {
      for (int i = 0; i < start.children.size(); i++) {
        if (highlight((MyNode)start.children.get(i)) != null) {
          return highlight((MyNode) start.children.get(i));
        }
      }
    }
    return null;
  }

  void renderBox() {
    fill(150, 150, 150, 220);
    noStroke();
    rect(this.boxX, this.boxY, this.boxWidth, this.boxHeight, 8);  //main control square

    fill(100);
    rect(this.buttonx, this.collapseY, this.buttonWidth, this.buttonHeight, 8);
    rect(this.buttonx, this.expandY, this.buttonWidth, this.buttonHeight, 8);
    rect(this.buttonx, this.centerY, this.buttonWidth, this.buttonHeight, 8);

    fill(255);
    textSize(15);
    textAlign(CENTER);
    text("COLLAPSE", .5*(this.boxWidth + this.boxX), this.boxY + this.buttonHeight);
    text("EXPAND", .5*(this.boxWidth + this.boxX), this.boxY + 2*this.buttonHeight + 10);
    text("CENTER", .5*(this.boxWidth + this.boxX), this.boxY + 3*this.buttonHeight + 20);
    text("CLICK OFF TO CLOSE BOX", .5*(this.boxWidth + this.boxX + 10), this.boxY + 50 + 3*this.buttonHeight);
    text("SELECTED NODE: " + this.selectedNode.id, .5*(this.boxWidth + this.boxX + 10), this.boxY + 50 + 4*this.buttonHeight);
  }

  void buttonIsect() {
    if (buttonIsect(this.collapseY)) {
      println("collapse");
      if (this.selectedNode != mytree.current) {
        this.selectedNode.collapse = true;
      }
    }
    if (buttonIsect(this.expandY) && (this.selectedNode.collapse)) {
      this.selectedNode.collapse = false;
      return;
    }
    if (buttonIsect(this.centerY)) {
      println("center pressed");
      mytree.center(this.selectedNode);
    }
  }

  boolean buttonIsect(float _y) {
    float xDist = mouseX - this.buttonx; 
    float yDist = mouseY - _y;
    if ((xDist < this.buttonWidth) && (yDist < this.buttonHeight) && (xDist > 0) && (yDist > 0)) {
      return true;
    }
    return false;
  }


  void showInfo(MyNode start) {
    MyNode hover = highlight(start);
    if (hover != null) {
      float _width = hover.details.textboxWidth + 10;
      float _y;
      float _x;
      fill(150, 150, 150, 220);
      noStroke();
      _x = mouseX;
      _y = mouseY;
      if (mouseX > width - _width) {
        _x = mouseX - _width;
      }
      if (mouseY < 200) {
        _y = mouseY + 200;
      }
      rect(_x, _y - 200, _width, 200, 8);
      fill(255);
      textAlign(LEFT);
      textSize(12);
      text("ID: " + hover.id + '\n' + hover.details.labels[0]  + '\n' + hover.details.labels[1] + '\n'+ hover.details.labels[2] +
        '\n' + hover.details.labels[3] + '\n' + hover.details.labels[4] + '\n' + hover.details.labels[5] + '\n' + hover.details.labels[6] + '\n' +
        hover.details.labels[7], _x + 5, _y - 195, _width, 200);
    }
  }
}

