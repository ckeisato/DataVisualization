
class MyController {
  MyNode chosen;
  boolean buttons;
  boolean showingBox;

  float boxX;
  float boxY;
  float boxWidth;
  float boxHeight;

  float buttonx;
  float collapseY;
  float expandY;
  float centerY;

  float buttonHeight;
  float buttonWidth;

  public MyController() {
    this.buttons = false;
    this.showingBox = false;

    this.boxX = 20;
    this.boxY = 20;
    this.boxWidth = 200;
    this.boxHeight = 200;

    this.buttonHeight = 30;
    this.buttonWidth = this.boxWidth - 20;

    this.buttonx = this.boxX + 10;
    this.collapseY = this.boxY + 10;
    this.expandY = this.boxY + 20 + this.buttonHeight;
    this.centerY = this.boxY + 30 + 2*this.buttonHeight;
  }


  void run(MyNode start) {
    this.chosen = highlight(start);
    if (this.chosen != null) {
      this.showingBox = true;
    }
    else if (this.chosen == null) {
      this.showingBox = false;
    }
  }



  MyNode highlight(MyNode start) {
    if (start.circle.isBounded()) {
      return start;
    }
    if (!start.leaf) {
      for (int i = 0; i < start.children.size(); i++) {
        if (highlight((MyNode)start.children.get(i)) != null) {
          return highlight((MyNode) start.children.get(i));
        }
      }
    }
    return null;
  }

  void renderBox() {
    fill(150, 150, 150, 220);
    noStroke();
    rect(this.boxX, this.boxY, this.boxWidth, this.boxHeight, 8);  //main control square

    fill(100);
    rect(this.buttonx, this.collapseY, this.buttonWidth, this.buttonHeight, 8);
    rect(this.buttonx, this.expandY, this.buttonWidth, this.buttonHeight, 8);
    rect(this.buttonx, this.centerY, this.buttonWidth, this.buttonHeight, 8);

    fill(255);
    textSize(15);
    text("COLLAPSE", .5*(this.boxWidth + this.boxX), this.boxY + this.buttonHeight);
    text("EXPAND", .5*(this.boxWidth + this.boxX), this.boxY + 2*this.buttonHeight + 10);
    text("CENTER", .5*(this.boxWidth + this.boxX), this.boxY + 3*this.buttonHeight + 20);
    text("CLICK OFF TO CLOSE BOX", .5*(this.boxWidth + this.boxX + 10), this.boxY + 50 + 3*this.buttonHeight);
    if (this.chosen != null) {
      text("CHOSEN NODE: " + this.chosen.id, .5*(this.boxWidth + this.boxX + 10), this.boxY + 50 + 4*this.buttonHeight);
    }
  }

  void buttonIsect() {
    if (buttonIsect(this.collapseY)) {
      println("collapse");
      this.chosen.collapse = true;
    }
    if (buttonIsect(this.expandY) && (this.chosen.collapse)) {
      this.chosen.collapse = false;
      return;
    }
    if (buttonIsect(this.centerY) && this.chosen != null) {
      println("center pressed");
      mytree.center(this.chosen);
    }
  }

  boolean buttonIsect(float _y) {
    float xDist = mouseX - this.buttonx; 
    float yDist = mouseY - _y;
    if ((xDist < this.buttonWidth) && (yDist < this.buttonHeight) && (xDist > 0) && (yDist > 0)) {
      return true;
    }
    return false;
  }


  void showInfo(MyNode start) {
    MyNode chosen = highlight(start);
    if (chosen != null) {
      fill(150, 150, 150, 220);
      noStroke();
      rect(mouseX, mouseY - 200, 220, 200, 8); ///box
      fill(255);
      textAlign(LEFT);
      text("ID: " + chosen.id, mouseX + 5, mouseY - 150, 90, 20);
      text("Size: " + chosen.details.numReactions, mouseX + 5, mouseY - 135, 190, 20);
      if(!chosen.leaf){
        text("Avg Shred: " + chosen.details.avgShred, mouseX + 5, mouseY - 120, 190, 20);
       // text("Extracelluar Transport: " + chosen.details.EC_transport, mouseX + 5, mouseY - 105, 190, 30);
       text("Extracellular Transport: " + chosen.details.EC_transport + 
       "\nCarbohydrate Metabolism: " + chosen.details.carbMetab + 
       "\nTCA Oxphos: " + chosen.details.TCA_oxphos + 
       "\nCitrate Malate: " + chosen.details.citrateMalate + 
       "\nLipid Metabolism: " + chosen.details.lipidMetab + 
       "\nAmino Acid Metabolism: " + chosen.details.aminoAcidMetab, mouseX + 5, mouseY - 105, 210, 80);
      }
      
      
     // text(s, 10, 10, 70, 80);  // Text wraps within text box

    }
  }
}


//
//  float avgShred;
//
//  //reaction classification proportions
//  float EC_transport;
//  float carbMetab;
//  float TCA_oxphos;
//  float citrateMalate;
//  float lipidMetab;
//  float aminoAcidMetab;
