
//more details may be addes later, homogeneity index, cycles, if it gets a red line?, etc.
class MyDetails {
  ArrayList labels;  //this is a list of strings
  float[] proportions;  //this is a list of numbers
  color[] colors;


///this is for nodes
  float numReactions;
  float avgShred;
  float textBoxWidth;
  float textBoxHeight;
  boolean oneType;
  String oneClass;
  
  float compareX;
  float compareY;

  String nodeID; 
  String information;

  //for nodes
  public MyDetails() {
  }


  //for functioning
  public MyDetails(MyParser colormap) {
    int rows = colormap.getNumItems();

    this.labels = new ArrayList(rows);

    for (int i = 1; i < rows; i++) {
      this.labels.add(colormap.getValue(i, 0));
    }

    this.colors = new color[rows];
    for (int i = 1; i < rows; i++) {
      this.colors[i-1] = color(int(colormap.getValue(i, 1)), int(colormap.getValue(i, 2)), int(colormap.getValue(i, 3)));
    }

    this.textBoxWidth = 0; 
    for (int i = 0; i < this.labels.size(); i++) {
      if (this.textBoxWidth  < textWidth((String) this.labels.get(i)) + textWidth(": 123.4567")) {
        this.textBoxWidth = textWidth((String) this.labels.get(i)) + textWidth(": 123.4567");
      }
    }
  }


  public void initializeNode(MyNode node, MyParser moduleReport, MyParser moduleComp) {
    this.moduleReportInit(node, moduleReport);  //so far only sets module report
    this.moduleCompInit(node, moduleComp);
    this.check1reaction(node);
    node.details.information = this.makeInfoString(node);

    if (node.leaf) {
      return;
    }
    for (int i = 0; i < node.children.size(); i++) {
      MyNode child = (MyNode) node.children.get(i);
      initializeNode(child, moduleReport, moduleComp);
    }
  }


  private void moduleReportInit(MyNode node, MyParser moduleReport) {
    node.details.nodeID = node.id;
    for (int i = 1; i < moduleReport.numItems; i++) {
      if (node.id.equals(moduleReport.getValue(i, 0))) {
        node.details.numReactions = float(moduleReport.getValue(i, 1));
        node.details.avgShred = float(moduleReport.getValue(i, 8));
        break;
      }
    }
  }


  private void moduleCompInit(MyNode node, MyParser moduleComp) {
    node.details.proportions = new float[this.labels.size()];
    for (int i = 0; i < this.labels.size(); i++) {
      node.details.proportions[i] = 0;
    }

    for (int i = 0; i < moduleComp.getRowLength(0); i++) {
      if (node.id.equals(moduleComp.getValue(0, i))) {
        for (int j = 1; j < node.details.numReactions + 1; j++) {
          String type = moduleComp.getValue(j, i+1);          
          for (int k = 0; k < this.labels.size(); k++) {
            if (type.equals((String) this.labels.get(k))) {
              node.details.proportions[k]++;
            }
          }
        }
      }
    }

    for (int i = 0; i < this.labels.size(); i++) {
      node.details.proportions[i] = (node.details.proportions[i]/node.details.numReactions)*100;
    }
  }

  private void check1reaction(MyNode node) {
    node.setColor(170, 170, 170);
    node.details.textBoxWidth = this.textBoxWidth;
    node.details.textBoxHeight = 175;
    for (int i = 0; i < this.labels.size(); i++) {
      if (node.details.proportions[i] == 100.0) {
        node.details.oneType = true;
        node.details.oneClass = (String) this.labels.get(i);
        node.details.textBoxWidth = textWidth(node.details.oneClass + ": 123.4567");
        node.setColor(int(red(int(this.colors[i]))), int(green(int(this.colors[i]))), int(blue(int(this.colors[i]))));
        node.details.textBoxHeight = 60;
        return;
      }
    }
  }


  String makeInfoString(MyNode node) {
    if (node.details.oneType) {
      String text = "ID: " + node.details.nodeID + " Size: " + node.details.numReactions + "\n" + node.details.oneClass + " 100%";
      return text;
    }
    String text = "ID: " + node.id + " Size: " + node.details.numReactions + "\nAvgShred: " + node.details.avgShred;
    for (int i = 0; i < this.labels.size(); i++) {
      text = text + "\n" + (String) this.labels.get(i) + ": " + node.details.proportions[i] + " %";
    }
    return text;
  }

  //called by individual node
  void renderInfoBox(float x, float y) {
    this.compareX = x;
    this.compareY = y;

    fill(150, 150, 150, 220);
    rect(this.compareX, this.compareY, this.textBoxWidth, this.textBoxHeight, 9);
    fill(255);
    textSize(12);
    textAlign(LEFT);
    text(this.information, this.compareX + 5, this.compareY + 3, this.textBoxWidth, this.textBoxHeight);
  }

  boolean isect(float x, float y) {
   
    float xDist = mouseX - x; 
    float yDist = mouseY - y;
    
    if ((xDist < this.textBoxWidth) && (yDist < this.textBoxHeight) && (xDist > 0) && (yDist > 0)) {
      return true;
    }
    return false;
  }
  
  
  
  
}
